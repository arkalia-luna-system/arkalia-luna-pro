{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udcda Documentation Arkalia-LUNA","text":"<p>Bienvenue dans la documentation technique d\u2019Arkalia-LUNA, un syst\u00e8me cognitif IA local, modulaire, auto-r\u00e9flexif et enti\u00e8rement document\u00e9.</p> <p>Cette documentation couvre l\u2019ensemble des composants : modules actifs, API locale, scripts d\u2019orchestration, tests, automatisation et int\u00e9gration de mod\u00e8les IA (LLM).</p>"},{"location":"#modules-actifs","title":"\ud83e\udde0 Modules actifs","text":"<ul> <li><code>reflexia</code> \u2014 R\u00e9flexion adaptative et surveillance syst\u00e8me  </li> <li><code>zeroia</code> \u2014 Raisonnement logique et d\u00e9cisions contextuelles  </li> <li><code>nyxalia</code> \u2014 Interfaces mobiles et externes  </li> <li><code>helloria</code> \u2014 Passerelle FastAPI et serveur local  </li> </ul>"},{"location":"#fonctionnalites-couvertes-dans-la-documentation","title":"\u2699\ufe0f Fonctionnalit\u00e9s couvertes dans la documentation","text":"<ul> <li>\ud83e\udde0 Modules IA actifs</li> <li>\u2699\ufe0f API FastAPI (avec endpoints <code>/status</code>, <code>/module/trigger</code>, etc.)</li> <li>\ud83e\uddec Structure du noyau (kernel &amp; devstation)</li> <li>\ud83d\udd01 Scripts &amp; automatisation (<code>ark-test</code>, <code>ark-docker-rebuild.sh</code>, etc.)</li> <li>\ud83e\uddea Tests unitaires &amp; CI/CD (pytest, ruff, GitHub Actions)</li> <li>\ud83d\udc33 Docker &amp; d\u00e9ploiement local</li> </ul>"},{"location":"#configuration-locale-des-modeles-ollama","title":"\ud83d\udd01 Configuration locale des mod\u00e8les (Ollama)","text":"<p>Utilisation des mod\u00e8les LLM localement avec <code>ollama</code>, sans consommer l\u2019espace disque interne du Mac.</p> <p>\u27a1 Voir le d\u00e9p\u00f4t d\u00e9di\u00e9 : arkalia-ollama (GitHub)</p>"},{"location":"#modeles-installes","title":"\u2705 Mod\u00e8les install\u00e9s :","text":"<ul> <li><code>mistral</code></li> <li><code>tinyllama</code></li> <li><code>llama2</code></li> </ul> <p>\ud83d\udcc1 Chemin de stockage : <code>/Volumes/T7/devstation/ollama_data/models</code></p> <p>\ud83e\udded Cette documentation \u00e9volue en parall\u00e8le du syst\u00e8me IA. Toute mise \u00e0 jour majeure de code est automatiquement synchronis\u00e9e avec cette page via GitHub Actions (MkDocs). </p>"},{"location":"CHANGELOG/","title":"\ud83d\udcc3 CHANGELOG \u2014 Arkalia-LUNA","text":"<p>Historique complet des versions et \u00e9volutions majeures du syst\u00e8me IA local Arkalia-LUNA.</p>"},{"location":"CHANGELOG/#v106-2025-06-18","title":"[v1.0.6] \u2014 2025-06-18","text":"<p>\ud83d\udd16 Version STABLE PRO \u2014 Base officielle du noyau IA modulaire local</p>"},{"location":"CHANGELOG/#ajouts","title":"\u2705 Ajouts","text":"<ul> <li>Modules IA actifs : <code>Reflexia</code>, <code>Nyxalia</code>, <code>Helloria</code></li> <li>API FastAPI op\u00e9rationnelle (<code>/</code>, <code>/status</code>, <code>/module/trigger</code>)</li> <li>Int\u00e9gration compl\u00e8te de Docker (<code>Dockerfile</code>, <code>docker-compose</code>)</li> <li>Scripts IA pro : <code>ark-test</code>, <code>ark-docker-rebuild.sh</code>, <code>ark-clean-push</code>, <code>trigger_scan.sh</code></li> <li>Int\u00e9gration Ollama : mod\u00e8les locaux (<code>mistral</code>, <code>llama2</code>, <code>tinyllama</code>)</li> <li>Documentation publique auto-g\u00e9n\u00e9r\u00e9e avec <code>MkDocs</code></li> </ul>"},{"location":"CHANGELOG/#tests-ci","title":"\ud83e\uddea Tests &amp; CI","text":"<ul> <li>Couverture <code>pytest</code> \u00e0 100 %</li> <li>CI GitHub Actions : <code>black</code>, <code>ruff</code>, <code>pytest</code>, <code>gh-pages</code></li> </ul>"},{"location":"CHANGELOG/#structure-stabilisee","title":"\ud83d\udee0 Structure stabilis\u00e9e","text":"<ul> <li>S\u00e9paration claire entre <code>arkalia-luna-core</code> (kernel) et <code>arkalia-luna-pro</code> (devstation)</li> <li><code>.zshrc</code> pro avec alias (<code>ark-test</code>, <code>ark-backup</code>, etc.)</li> <li><code>README.md</code> restructur\u00e9 + badges actifs</li> </ul>"},{"location":"CHANGELOG/#v030-docker-ok-2025-06-17","title":"[v0.3.0-docker-ok] \u2014 2025-06-17","text":"<ul> <li>Dockerfile fonctionnel avec FastAPI</li> <li><code>docker-compose</code> op\u00e9rationnel</li> <li>D\u00e9ploiement en local avec <code>uvicorn</code></li> <li>Premiers scripts : <code>ark-docker-rebuild.sh</code>, <code>ark-test</code></li> </ul>"},{"location":"CHANGELOG/#v020-2025-06-16","title":"[v0.2.0] \u2014 2025-06-16","text":"<ul> <li>Ajout des dossiers pro : <code>docs/</code>, <code>scripts/</code>, <code>tests/</code>, <code>.github/workflows/</code></li> <li>Int\u00e9gration des outils : <code>pytest</code>, <code>black</code>, <code>ruff</code>, <code>pre-commit</code></li> <li>D\u00e9but de CI/CD GitHub</li> </ul>"},{"location":"CHANGELOG/#v011-2025-06-15","title":"[v0.1.1] \u2014 2025-06-15","text":"<ul> <li>Nettoyage complet des anciens fichiers</li> <li>Initialisation de la Devstation IA (<code>arkalia-luna-pro</code>)</li> <li>Configuration du venv, <code>pyproject.toml</code>, <code>bumpver</code>, hooks Git</li> </ul>"},{"location":"CHANGELOG/#v010-init","title":"[v0.1.0] \u2014 INIT","text":"<ul> <li>R\u00e9initialisation d\u2019Arkalia-LUNA depuis <code>arkalia-system</code> h\u00e9rit\u00e9</li> <li>Cr\u00e9ation du noyau <code>arkalia-luna-core</code> (fig\u00e9, propre, sans dette technique)</li> </ul>"},{"location":"api/","title":"\ud83d\ude80 API FastAPI \u2014 Arkalia-LUNA","text":"<p>L\u2019API FastAPI d\u2019Arkalia-LUNA permet d\u2019interagir avec le syst\u00e8me IA depuis des requ\u00eates HTTP locales, tout en garantissant modularit\u00e9, s\u00e9curit\u00e9 et scalabilit\u00e9.</p>"},{"location":"api/#endpoint-de-base","title":"\ud83c\udf10 Endpoint de base","text":"<ul> <li>URL locale : <code>http://127.0.0.1:8000/</code></li> <li>Serveur : <code>Uvicorn</code> via Docker ou lancement manuel</li> <li>Script de d\u00e9marrage : ```bash uvicorn helloria.core:app --reload</li> </ul>"},{"location":"automation/","title":"\ud83d\udee0\ufe0f Scripts & Automatisation","text":""},{"location":"automation/#docsautomationmd-scripts-automatisation","title":"\u2705 <code>/docs/automation.md</code> \u2014 Scripts &amp; Automatisation","text":"<p>```markdown</p>"},{"location":"automation/#scripts-automatisation-arkalia-luna","title":"\ud83e\udd16 Scripts &amp; Automatisation \u2014 Arkalia-LUNA","text":"<p>Le c\u0153ur d\u2019Arkalia repose sur un ensemble de scripts bash professionnels et de boucles intelligentes permettant l'orchestration autonome du syst\u00e8me IA.</p>"},{"location":"automation/#boucle-maitresse-arkalia_master_looppy","title":"\ud83d\udd01 Boucle Ma\u00eetresse : <code>arkalia_master_loop.py</code>","text":"<p>Cette boucle unique orchestre l\u2019ensemble du syst\u00e8me en :</p> <ul> <li>Chargeant les modules d\u00e9clar\u00e9s dans <code>config/</code></li> <li>R\u00e9injectant les \u00e9tats enregistr\u00e9s depuis <code>state/</code></li> <li>Analysant les logs pour d\u00e9cisions correctives</li> <li>D\u00e9l\u00e9guant aux IA internes (Reflexia, ZeroIA) les actions adaptatives</li> </ul>"},{"location":"automation/#scripts-principaux","title":"\u2699\ufe0f Scripts Principaux","text":"Script Fonction <code>ark-bootstrap</code> Initialise l\u2019environnement IA local (<code>venv</code>, pre-commit, configs) <code>ark-test</code> Lance tous les tests <code>pytest</code> + g\u00e9n\u00e8re la couverture <code>ark-docker-rebuild.sh</code> Rebuild du container Docker propre et relance FastAPI <code>trigger_scan.sh</code> D\u00e9clenche une analyse r\u00e9flexive manuelle via ReflexIA <code>ark-clean-push</code> Lint (<code>ruff</code>), format (<code>black</code>) puis <code>git commit + push</code> automatis\u00e9 <p>\ud83d\udca1 Ces scripts sont con\u00e7us pour \u00eatre d\u00e9clench\u00e9s par l\u2019IA elle-m\u00eame (ZeroIA, ReflexIA) selon les contextes syst\u00e8mes d\u00e9tect\u00e9s.</p>"},{"location":"automation/#orchestration-ia-dynamique","title":"\ud83e\udde0 Orchestration IA Dynamique","text":"<p>Reflexia ou ZeroIA peuvent :</p> <ul> <li>suspendre des modules</li> <li>forcer des tests</li> <li>relancer un container</li> <li>corriger automatiquement un \u00e9tat corrompu</li> </ul> <p>\ud83e\udded Arkalia n'est pas seulement automatis\u00e9e \u2014 elle est auto-orchestr\u00e9e.</p>"},{"location":"ci-cd/","title":"\ud83e\uddea Int\u00e9gration Continue (CI) &amp; Tests \u2014 Arkalia-LUNA","text":"<p>Arkalia-LUNA suit une discipline stricte de testabilit\u00e9 et de qualit\u00e9 de code automatis\u00e9e, pour garantir un cycle de vie logiciel durable et sans dette technique.</p>"},{"location":"ci-cd/#couverture-de-tests","title":"\u2705 Couverture de Tests","text":"<ul> <li><code>pytest</code> + <code>pytest-cov</code></li> <li>Couverture actuelle : 100%</li> <li>Rapport HTML g\u00e9n\u00e9r\u00e9 automatiquement : <code>htmlcov/index.html</code></li> </ul>"},{"location":"ci-cd/#linting-qualite-de-code","title":"\u2705 Linting &amp; Qualit\u00e9 de Code","text":"<ul> <li><code>black</code> \u2192 Formatage automatique du code Python</li> <li><code>ruff</code> \u2192 Analyse de code statique rapide</li> <li><code>pre-commit</code> \u2192 Lancement automatique \u00e0 chaque commit Git</li> </ul> <p>\ud83d\udca1 Chaque commit est bloqu\u00e9 si le code est mal format\u00e9 ou comporte des erreurs non corrig\u00e9es.</p>"},{"location":"ci-cd/#pipeline-cicd-github-actions","title":"\u2705 Pipeline CI/CD \u2014 GitHub Actions","text":"<p>Le d\u00e9p\u00f4t utilise GitHub Actions pour :</p> \u00c9tape Description \ud83d\udd0d <code>Lint</code> V\u00e9rifie tout le code (<code>ruff</code>, <code>black</code>) \ud83e\uddea <code>Tests</code> Lance <code>pytest</code>, g\u00e9n\u00e8re couverture \ud83d\udcda <code>Docs Deploy</code> D\u00e9ploie automatiquement la doc MkDocs vers GitHub Pages <p>Fichier de workflow : ```bash .github/workflows/ci.yml</p>"},{"location":"kernel/","title":"\ud83e\udde0 Noyau Cognitif","text":"<p>\ud83e\uddec Structure du Noyau \u2014 Arkalia</p> <p>Le noyau Arkalia est con\u00e7u comme une architecture IA industrielle modulaire, avec une s\u00e9paration stricte entre le kernel pur et la Devstation de d\u00e9veloppement IA.</p> <p>\u2e3b</p> <p>\u2699\ufe0f 1\ufe0f\u20e3 /arkalia-luna-core/ \u2014 Kernel IA Pur</p> <p>Partie stable, fig\u00e9e, sans logique m\u00e9tier. C\u2019est le socle d\u2019ex\u00e9cution s\u00e9curis\u00e9.</p> <pre><code>\u2022   \ud83d\udcc1 Contenu : uniquement des fichiers de configuration syst\u00e8me (.toml, scripts init)\n\u2022   \ud83d\udd12 Aucune dette technique autoris\u00e9e\n\u2022   \ud83d\ude80 Script de d\u00e9marrage : arkalia_devstation_bootstrap.sh\n\u2022   \ud83e\uddf1 R\u00f4le : pr\u00e9parer, s\u00e9curiser, isoler la Devstation IA du reste du syst\u00e8me\n</code></pre> <p>\u2e3b</p> <p>\ud83e\udde0 2\ufe0f\u20e3 /arkalia-luna-pro/ \u2014 Devstation IA Modulaire</p> <p>Environnement de d\u00e9veloppement local modulaire, dockeris\u00e9, test\u00e9, avec CI/CD active.</p> <pre><code>\u2022   \ud83e\udde9 Modules IA : reflexia, nyxalia, helloria, etc.\n\u2022   \ud83e\uddea Tests unitaires avec pytest\n\u2022   \ud83d\udc33 Docker + Docker Compose\n\u2022   \ud83d\udea6 GitHub Actions (CI/CD, lint, couverture)\n\u2022   \ud83c\udf0d API FastAPI disponible localement\n\u2022   \ud83d\udd16 Version actuelle : v1.0.6\n</code></pre> <p>\u2e3b</p> <p>\ud83d\udcc1 Structure Type \u2014 Devstation Pro</p> <p>arkalia-luna-pro/ \u251c\u2500\u2500 modules/               # Modules IA isol\u00e9s \u251c\u2500\u2500 core/                  # Logique transversale \u251c\u2500\u2500 config/                # Fichiers .toml / .json \u251c\u2500\u2500 logs/                  # Journaux du syst\u00e8me \u251c\u2500\u2500 state/                 # \u00c9tats persistants \u251c\u2500\u2500 scripts/               # Scripts utilitaires (build, docker, test) \u251c\u2500\u2500 docs/                  # Documentation MkDocs \u251c\u2500\u2500 tests/                 # Tests unitaires (pytest) \u251c\u2500\u2500 .github/workflows/     # Pipelines CI GitHub Actions</p> <p>\ud83e\udde9 Philosophie de conception     \u2022   \ud83d\udd12 Stabilit\u00e9 garantie par s\u00e9paration Kernel / M\u00e9tier     \u2022   \u267b\ufe0f Modules IA interchangeables     \u2022   \ud83e\uddea Tests et couverture obligatoires     \u2022   \ud83d\udef0 D\u00e9ploiement local ma\u00eetris\u00e9     \u2022   \ud83d\udcda Documentation publique automatis\u00e9e</p>"},{"location":"modules/","title":"\ud83e\udde9 Modules actifs","text":"<p>\ud83d\udd01 reflexia/ \u2014 R\u00e9flexion adaptative &amp; surveillance syst\u00e8me</p> <p>Supervise l\u2019\u00e9tat global du syst\u00e8me, d\u00e9tecte les d\u00e9rives, applique des correcteurs. C\u2019est l\u2019observateur r\u00e9flexif central du noyau Arkalia.</p> <p>\u2e3b</p> <p>\ud83d\udcf1 nyxalia/ \u2014 Interface &amp; interactions mobiles</p> <p>Sert de pont entre Arkalia et les couches d\u2019interface (mobile, vocale, API externes). Focalis\u00e9 sur la communication fluide et naturelle.</p> <p>\u2e3b</p> <p>\ud83c\udf10 helloria/ \u2014 Lien FastAPI &amp; serveurs locaux</p> <p>D\u00e9marre et orchestre l\u2019API locale FastAPI. Sert de passerelle entre les modules internes et les interfaces REST.</p> <p>Chaque module suit la structure : modules// \u251c\u2500\u2500 init.py \u251c\u2500\u2500 core.py \u251c\u2500\u2500 config/ \u251c\u2500\u2500 state/ \u251c\u2500\u2500 logs/ \u251c\u2500\u2500 tests/ \u251c\u2500\u2500 utils/ <p>Chaque module est isol\u00e9, testable, extensible.</p>"},{"location":"ollama/","title":"\ud83e\udde0 Ollama \u2014 Mod\u00e8les LLM Locaux","text":""},{"location":"ollama/#chemin-de-stockage","title":"Chemin de stockage","text":"<p><code>/Volumes/T7/devstation/ollama_data/models</code></p>"},{"location":"ollama/#modeles-installes","title":"Mod\u00e8les install\u00e9s","text":"<ul> <li>mistral</li> <li>llama2</li> <li>tinyllama</li> </ul>"},{"location":"ollama/#configuration","title":"Configuration","text":"<p>Ajoutez ceci dans <code>.zshrc</code> : ```bash export OLLAMA_MODELS=/Volumes/T7/devstation/ollama_data/models</p>"},{"location":"structure/","title":"\ud83e\uddec Structure du noyau Arkalia-LUNA","text":""},{"location":"structure/#racine","title":"Racine :","text":"<ul> <li><code>/core/</code> \u2192 logique commune</li> <li><code>/modules/</code> \u2192 modules IA isol\u00e9s</li> <li><code>/config/</code> \u2192 fichiers <code>.toml</code>, <code>.json</code>, etc.</li> <li><code>/logs/</code>, <code>/state/</code>, <code>/utils/</code></li> </ul>"},{"location":"structure/#devstation","title":"Devstation :","text":"<ul> <li>Git propre avec tags + CI</li> <li>Docker + mkdocs + tests</li> </ul> <p>arkalia-luna-pro/ \u251c\u2500\u2500 core/        # Logique commune transversale \u251c\u2500\u2500 modules/     # Modules IA isol\u00e9s et autonomes \u251c\u2500\u2500 config/      # Fichiers .toml / .json centralis\u00e9s \u251c\u2500\u2500 logs/        # Journaux d\u2019activit\u00e9 et ex\u00e9cution \u251c\u2500\u2500 state/       # \u00c9tats persistants (internes / cognitifs) \u251c\u2500\u2500 utils/       # Fonctions techniques internes partag\u00e9es \u251c\u2500\u2500 tests/       # Tests unitaires (pytest) \u251c\u2500\u2500 docs/        # Documentation MkDocs \u2514\u2500\u2500 scripts/     # Scripts automatis\u00e9s (build, test, Docker)</p> <p>\ud83e\uddea Devstation IA Professionnelle</p> <p>Ta Devstation actuelle est un environnement de production IA local, avec les composants suivants :</p> <p>Composant Statut D\u00e9tail \ud83d\udd00 Git \u2705 Propre avec tags, branches, bumpver \ud83e\uddea Tests \u2705 pytest + pytest-cov, 100% couverture \ud83e\uddfc Qualit\u00e9 code \u2705 pre-commit actif (black, ruff) \ud83d\udc33 Docker \u2705 Dockerfile + docker-compose stables \ud83c\udf0d API \u2705 FastAPI + Uvicorn local fonctionnel \ud83d\udcd8 Docs \u2705 MkDocs auto-publi\u00e9e (gh-pages) \ud83d\udea6 CI/CD \u2705 GitHub Actions (tests, lint, deploy)</p> <p>\ud83e\udde0 Objectifs vis\u00e9s     \u2022   \ud83d\udca1 Z\u00e9ro dette technique     \u2022   \ud83d\udd01 Modules IA ind\u00e9pendants et orchestrables     \u2022   \ud83d\udef0 D\u00e9ploiement local rapide &amp; versionn\u00e9     \u2022   \ud83e\udde9 Interop\u00e9rabilit\u00e9 entre sous-syst\u00e8mes (Reflexia, ZeroIA, etc.)</p>"},{"location":"docs/","title":"Introduction","text":"<p>Bienvenue dans la documentation technique d'Arkalia-LUNA \u2014 un syst\u00e8me cognitif IA local, modulaire, auto-r\u00e9flexif, et d\u00e9ployable sur machine personnelle.</p> <p>Cette documentation couvre l'architecture, les modules, l'automatisation, l'API locale, les tests et le d\u00e9ploiement.</p>"},{"location":"docs/#ollama","title":"Ollama","text":"<p>Ollama est un composant essentiel de notre architecture, offrant des capacit\u00e9s avanc\u00e9es de gestion et d'orchestration. </p>"},{"location":"docs/api/","title":"Api","text":""},{"location":"docs/api/#endpoints-fastapi","title":"Endpoints FastAPI","text":"<p>Les endpoints FastAPI permettent une interaction rapide et efficace avec notre syst\u00e8me, offrant des performances optimis\u00e9es pour les applications modernes. </p>"},{"location":"docs/automation/","title":"Automation","text":""},{"location":"docs/automation/#scripts-dautomatisation","title":"Scripts d'Automatisation","text":"<p>Les scripts d'automatisation sont utilis\u00e9s pour simplifier les t\u00e2ches r\u00e9p\u00e9titives et am\u00e9liorer l'efficacit\u00e9.</p>"},{"location":"docs/automation/#boucles-dautomatisation","title":"Boucles d'Automatisation","text":"<p>Les boucles d'automatisation permettent de surveiller et de r\u00e9agir aux \u00e9v\u00e9nements en temps r\u00e9el. </p>"},{"location":"docs/ci-cd/","title":"Ci cd","text":""},{"location":"docs/ci-cd/#couverture","title":"Couverture","text":"<p>La couverture des tests est essentielle pour garantir la qualit\u00e9 du code.</p>"},{"location":"docs/ci-cd/#pre-commit","title":"Pre-commit","text":"<p>Les hooks pre-commit sont utilis\u00e9s pour v\u00e9rifier le code avant qu'il ne soit ajout\u00e9 au d\u00e9p\u00f4t.</p>"},{"location":"docs/ci-cd/#cicd","title":"CI/CD","text":"<p>Les pipelines CI/CD automatisent le processus de d\u00e9ploiement, assurant une livraison continue et fiable. </p>"},{"location":"docs/modules/","title":"Modules","text":""},{"location":"docs/modules/#modules-actifs","title":"Modules Actifs","text":"<p>Les modules actifs incluent le gestionnaire de t\u00e2ches, le module de communication, et le module de s\u00e9curit\u00e9.</p>"},{"location":"docs/modules/#structure","title":"Structure","text":"<p>La structure des modules est con\u00e7ue pour \u00eatre modulaire et extensible, permettant une int\u00e9gration facile de nouvelles fonctionnalit\u00e9s. </p>"},{"location":"docs/structure/","title":"Structure","text":""},{"location":"docs/structure/#noyau-arkalia","title":"Noyau Arkalia","text":"<p>Le noyau d'Arkalia est compos\u00e9 du kernel et de la devstation, qui ensemble fournissent une base robuste pour le d\u00e9veloppement et l'ex\u00e9cution des applications. </p>"}]}